syntax = "proto3";

package ecosys;

message Message {
    Head head = 1;
    Body body = 2;
};

message Head {
    uint32 ctx_id = 1;
    uint32 random_num = 3;
    uint32 flow_no = 4;     // [unique, fixed, sender] in async req/res find corresponding message
    string session_no = 5;  // [unique, fixed, sender]
};

message Body {
    // SimpleResponse must have index 1
    // response index must be request index +1
    oneof payload {
        SimpleResponse simple_response = 1;

        InferenceRequest  inference_request  = 100001;
        InferenceResponse inference_response = 100002;

        // PushConfidenceRequest push_confidence_request = 100003;
        // simple response

        RegisterModelRequest register_model_request = 100005;
        RegisterModelResponse register_model_response = 100006;

        ReportMetricsRequest report_metrics_request = 100007;
        // simple response

        ReportMetaRequest report_meta_request = 100009;
    }
};

service Model {
//    rpc QueryInferenceStream (stream Message) returns (stream Message);
   rpc Inference (Message) returns (Message);
}

// message PushConfidenceRequest {
//     float threshold = 1;
//     float temperature = 2;
// }

service Coordinator {
    rpc RegisterModel (Message) returns (Message);
    rpc ReportMetrics (Message) returns (Message);
    rpc ReportMeta (Message) returns (Message);
}

// every response must contain this field
message ResponseCode {
    RetCode retcode = 1;                 // return code
    string error_message = 2;          // non-empty when return code is not zero
};

message SimpleResponse {
    ResponseCode rc = 1;
};

message InferenceRequest {
    map<string, bytes> input_batch = 1;
    bytes label = 11;
    bool temp_scale = 12;
};

message InferenceResponse {
    ResponseCode rc = 1;
    bytes logits = 10;
    // repeated EnergyInfo energy_info = 200;       
};

message ReportMetricsRequest {
    string model_name = 1;
    GPUStat gpu_stats = 2;
    uint32 num_query = 3;
    uint32 batch_size = 4;
    uint32 ctx_id = 5;
};

message ReportMetaRequest {
    string model_name = 1;
    bytes labels = 10;
    bytes outputs = 11;
    // TODO regression support
};

message GPUStat {
    float power = 2;
    float timestamp = 3;
    float utilization = 4;
    float mem_used = 5;
    float mem_total = 6;
}

message EnergyInfo {
    repeated GPUStat gpu_stats = 1;
    float latency = 2;
}

message RegisterModelRequest {
    string model_name = 1;  // huggingface name or get attr name
    // bool force = 10;
    // uint32 model_size = 3;  // model checkpoint size
};

message RegisterModelResponse {
    ResponseCode rc = 1;
    float threshold = 10;
    float temperature = 11;    
};

enum RetCode {
    SUCCESS  = 0;
    ERR_MISMATCH_MESSAGE = -100;
    ERR_NOT_INITIALIZED = -200;
    ERR_DATA_INCOMPLETE = -300;
}
